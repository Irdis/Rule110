!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	c:/Projects/Rule110/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/80ee839/
ANGlider	Gliders/ANGlider.cs	/^    public ANGlider(int n)$/;"	m	class:ANGlider
ANGlider	Gliders/ANGlider.cs	/^public class ANGlider : IGlider$/;"	c
AddRow	Gliders/BNHatGlider.cs	/^    public void AddRow(int[] pattern, Tile t, int row, ref int ind)$/;"	m	class:BNHatGlider
Analyze	GliderAnalyzer.cs	/^    public List<IGlider> Analyze(IGlider glider)$/;"	m	class:GliderAnalyzer
ApplyRule	Scene.cs	/^    private int ApplyRule(int[] arr, int p) $/;"	m	class:Scene	file:
Arr	Tile.cs	/^    public required int[] Arr { get; set; }$/;"	p	class:Tile
Arr	TilePrefix.cs	/^    public required int[] Arr { get; set; }$/;"	p	class:TilePrefix
B	Gliders/BNHatGlider.cs	/^    public static Tile B { get; } = TileUtils.ParseTile([$/;"	p	class:BNHatGlider
BGlider	Gliders/BGlider.cs	/^public class BGlider : IGlider$/;"	c
BLOCK_SIZE	ImgObserver.cs	/^    public const int BLOCK_SIZE = 1;$/;"	f	class:ImgObserver
BNConeHatGlider	Gliders/BNConeHatGlider.cs	/^    public BNConeHatGlider(int n) $/;"	m	class:BNConeHatGlider
BNConeHatGlider	Gliders/BNConeHatGlider.cs	/^public class BNConeHatGlider : BNHatGlider, IGlider$/;"	c
BNHatGlider	Gliders/BNHatGlider.cs	/^    public BNHatGlider(int n)$/;"	m	class:BNHatGlider
BNHatGlider	Gliders/BNHatGlider.cs	/^public abstract class BNHatGlider : IGlider$/;"	c
BNStraightHatGlider	Gliders/BNStraightHatGlider.cs	/^    public BNStraightHatGlider(int n) $/;"	m	class:BNStraightHatGlider
BNStraightHatGlider	Gliders/BNStraightHatGlider.cs	/^public class BNStraightHatGlider : BNHatGlider, IGlider$/;"	c
BPrefix	Gliders/BNHatGlider.cs	/^    public static TilePrefix BPrefix { get; } = TileUtils.ParsePrefix("*....", 3);$/;"	p	class:BNHatGlider
BSuffix	Gliders/BNConeHatGlider.cs	/^    public static TileSuffix BSuffix { get; } = TileUtils.ParseSuffix([$/;"	p	class:BNConeHatGlider
BSuffix	Gliders/BNStraightHatGlider.cs	/^    public static TileSuffix BSuffix { get; } = TileUtils.ParseSuffix([$/;"	p	class:BNStraightHatGlider
Body	Gliders/ENGlider.cs	/^    public static int[][] Body { get; } = TileUtils.ParseStrips(["*..*", "*.", "*.**"]);$/;"	p	class:ENGlider
Body	Gliders/GNGlider.cs	/^    public static int[][] Body = TileUtils.ParseStrips([$/;"	f	class:GNGlider
BodyLength	TileUtils.cs	/^    public static int BodyLength(int[][] strips, int n)$/;"	m	class:TileUtils
C1Glider	Gliders/C1Glider.cs	/^public class C1Glider : IGlider$/;"	c
C2Glider	Gliders/C2Glider.cs	/^public class C2Glider : IGlider$/;"	c
C3Glider	Gliders/C3Glider.cs	/^public class C3Glider : IGlider$/;"	c
Classic	Program.cs	/^    public static void Classic()$/;"	m	class:Program
Complete	ConsoleObserver.cs	/^    public void Complete()$/;"	m	class:ConsoleObserver
Complete	IObserver.cs	/^    void Complete();$/;"	m	interface:IObserver
Complete	ImgObserver.cs	/^    public void Complete()$/;"	m	class:ImgObserver
Complete	Scene.cs	/^    public void Complete()$/;"	m	class:Scene
ConsoleObserver	ConsoleObserver.cs	/^    public ConsoleObserver(int size, int? window = null)$/;"	m	class:ConsoleObserver
ConsoleObserver	ConsoleObserver.cs	/^public class ConsoleObserver : IObserver$/;"	c
Construct	Scene.cs	/^    public static int[] Construct()$/;"	m	class:Scene
ConstructEtherBorder	EtherBackground.cs	/^    private static int[,] ConstructEtherBorder()$/;"	m	class:EtherBackground	file:
D1Glider	Gliders/D1Glider.cs	/^public class D1Glider : IGlider$/;"	c
D2Glider	Gliders/D2Glider.cs	/^public class D2Glider : IGlider$/;"	c
Dispose	ImgBmp.cs	/^    public void Dispose()$/;"	m	class:ImgBmp
EHatGlider	Gliders/EHatGlider.cs	/^public class EHatGlider : IGlider$/;"	c
ENGlider	Gliders/ENGlider.cs	/^    public ENGlider(int n) $/;"	m	class:ENGlider
ENGlider	Gliders/ENGlider.cs	/^public class ENGlider : IGlider$/;"	c
EmptyBackground	EmptyBackground.cs	/^public class EmptyBackground : IBackground$/;"	c
EtherBackground	EtherBackground.cs	/^public class EtherBackground : IBackground$/;"	c
EtherEnter	Gliders/ANGlider.cs	/^    public int EtherEnter { get; set; }$/;"	p	class:ANGlider
EtherEnter	Gliders/BGlider.cs	/^    public int EtherEnter { get; } = 12;$/;"	p	class:BGlider
EtherEnter	Gliders/BNHatGlider.cs	/^    public int EtherEnter { get; }$/;"	p	class:BNHatGlider
EtherEnter	Gliders/C1Glider.cs	/^    public int EtherEnter { get; } = 4;$/;"	p	class:C1Glider
EtherEnter	Gliders/C2Glider.cs	/^    public int EtherEnter { get; } = 8;$/;"	p	class:C2Glider
EtherEnter	Gliders/C3Glider.cs	/^    public int EtherEnter { get; } = 12;$/;"	p	class:C3Glider
EtherEnter	Gliders/D1Glider.cs	/^    public int EtherEnter { get; } = 4;$/;"	p	class:D1Glider
EtherEnter	Gliders/D2Glider.cs	/^    public int EtherEnter { get; } = 8;$/;"	p	class:D2Glider
EtherEnter	Gliders/EHatGlider.cs	/^    public int EtherEnter { get; } = 0;$/;"	p	class:EHatGlider
EtherEnter	Gliders/ENGlider.cs	/^    public int EtherEnter { get; set; }$/;"	p	class:ENGlider
EtherEnter	Gliders/FGlider.cs	/^    public int EtherEnter { get; } = 4;$/;"	p	class:FGlider
EtherEnter	Gliders/GNGlider.cs	/^    public int EtherEnter { get; set; }$/;"	p	class:GNGlider
EtherEnter	Gliders/GenericGlider.cs	/^    public int EtherEnter { get; set; }$/;"	p	class:GenericGlider
EtherEnter	Gliders/GliderGun.cs	/^    public int EtherEnter { get; } = 4;$/;"	p	class:GliderGun
EtherEnter	Gliders/HGlider.cs	/^    public int EtherEnter { get; } = 4;$/;"	p	class:HGlider
EtherEnter	IGlider.cs	/^    int EtherEnter { get; }$/;"	p	interface:IGlider
EtherEntrances	TileSuffix.cs	/^    public required int[] EtherEntrances { get; set; }$/;"	p	class:TileSuffix
EtherLeave	Gliders/ANGlider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:ANGlider
EtherLeave	Gliders/BGlider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:BGlider
EtherLeave	Gliders/BNHatGlider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:BNHatGlider
EtherLeave	Gliders/C1Glider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:C1Glider
EtherLeave	Gliders/C2Glider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:C2Glider
EtherLeave	Gliders/C3Glider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:C3Glider
EtherLeave	Gliders/D1Glider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:D1Glider
EtherLeave	Gliders/D2Glider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:D2Glider
EtherLeave	Gliders/EHatGlider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:EHatGlider
EtherLeave	Gliders/ENGlider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:ENGlider
EtherLeave	Gliders/FGlider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:FGlider
EtherLeave	Gliders/GNGlider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:GNGlider
EtherLeave	Gliders/GenericGlider.cs	/^    public int EtherLeave { get; set; }$/;"	p	class:GenericGlider
EtherLeave	Gliders/GliderGun.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:GliderGun
EtherLeave	Gliders/HGlider.cs	/^    public int EtherLeave { get; } = 4;$/;"	p	class:HGlider
EtherLeave	IGlider.cs	/^    int EtherLeave { get; }$/;"	p	interface:IGlider
ExtractGlider	GliderAnalyzer.cs	/^    public IGlider ExtractGlider(int start, int end, int[] tape)$/;"	m	class:GliderAnalyzer
FGlider	Gliders/FGlider.cs	/^public class FGlider : IGlider$/;"	c
FILE_PATH	ImgObserver.cs	/^    public static readonly string FILE_PATH = "img.bmp";$/;"	f	class:ImgObserver
FirstNLength	TileUtils.cs	/^    public static int FirstNLength(int[][] strips, int n)$/;"	m	class:TileUtils
FlipState	Scene.cs	/^    public void FlipState(int pos)$/;"	m	class:Scene
GNGlider	Gliders/GNGlider.cs	/^    public GNGlider(int n)$/;"	m	class:GNGlider
GNGlider	Gliders/GNGlider.cs	/^public class GNGlider : IGlider$/;"	c
GenericGlider	Gliders/GenericGlider.cs	/^public class GenericGlider : IGlider$/;"	c
GetLeft	EmptyBackground.cs	/^    public int GetLeft(int lvl) => 0;$/;"	m	class:EmptyBackground
GetLeft	EtherBackground.cs	/^    public int GetLeft(int lvl)$/;"	m	class:EtherBackground
GetLeft	IBackground.cs	/^    int GetLeft(int lvl);$/;"	m	interface:IBackground
GetRight	EmptyBackground.cs	/^    public int GetRight(int lvl) => 0;$/;"	m	class:EmptyBackground
GetRight	EtherBackground.cs	/^    public int GetRight(int lvl)$/;"	m	class:EtherBackground
GetRight	IBackground.cs	/^    int GetRight(int lvl);$/;"	m	interface:IBackground
GliderAnalyzer	GliderAnalyzer.cs	/^public class GliderAnalyzer$/;"	c
GliderGun	Gliders/GliderGun.cs	/^public class GliderGun : IGlider$/;"	c
Gliders	Program.cs	/^    public static void Gliders()$/;"	m	class:Program
HGlider	Gliders/HGlider.cs	/^public class HGlider : IGlider$/;"	c
IBackground	IBackground.cs	/^public interface IBackground$/;"	i
IGlider	IGlider.cs	/^public interface IGlider$/;"	i
IObserver	IObserver.cs	/^public interface IObserver$/;"	i
ImgBmp	ImgBmp.cs	/^    public ImgBmp(string fileName, int width, int height, int bitsPerBlock = 1)$/;"	m	class:ImgBmp
ImgBmp	ImgBmp.cs	/^public class ImgBmp : IDisposable$/;"	c
ImgObserver	ImgObserver.cs	/^    public ImgObserver(int size, string? filePath = null) $/;"	m	class:ImgObserver
ImgObserver	ImgObserver.cs	/^public class ImgObserver : IObserver$/;"	c
Init	Scene.cs	/^    public void Init(List<(int, IGlider)> gliders)$/;"	m	class:Scene
InitComplete	Scene.cs	/^    public void InitComplete()$/;"	m	class:Scene
Main	Program.cs	/^    static void Main(string[] args)$/;"	m	class:Program	file:
Next	ConsoleObserver.cs	/^    public void Next(int lvl, int[] tape)$/;"	m	class:ConsoleObserver
Next	EmptyBackground.cs	/^    public int Next() $/;"	m	class:EmptyBackground
Next	EtherBackground.cs	/^    public int Next() $/;"	m	class:EtherBackground
Next	IBackground.cs	/^    int Next();$/;"	m	interface:IBackground
Next	IObserver.cs	/^    void Next(int lvl, int[] tape);$/;"	m	interface:IObserver
Next	ImgObserver.cs	/^    public void Next(int lvl, int[] tape)$/;"	m	class:ImgObserver
Next	Scene.cs	/^    public void Next()$/;"	m	class:Scene
NextRow	Tile.cs	/^    public int NextRow { get; set; }$/;"	p	class:Tile
Options	TileSuffix.cs	/^    public required List<int[]> Options { get; set; }$/;"	p	class:TileSuffix
PERIOD_X	EtherBackground.cs	/^    public const int PERIOD_X = 14;$/;"	f	class:EtherBackground
PERIOD_Y	EtherBackground.cs	/^    public const int PERIOD_Y = 7;$/;"	f	class:EtherBackground
ParsePrefix	TileUtils.cs	/^    public static TilePrefix ParsePrefix(string str, int entrance)$/;"	m	class:TileUtils
ParseStrip	TileUtils.cs	/^    public static int[] ParseStrip(string strip)$/;"	m	class:TileUtils
ParseStrips	TileUtils.cs	/^    public static int[][] ParseStrips(string[] strips)$/;"	m	class:TileUtils
ParseTile	TileUtils.cs	/^    public static Tile ParseTile(string[] stars, int nextRow)$/;"	m	class:TileUtils
Pattern	Gliders/ANGlider.cs	/^    public int[] Pattern { get; set; }$/;"	p	class:ANGlider
Pattern	Gliders/BGlider.cs	/^    public int[] Pattern { get; } = _pattern;$/;"	p	class:BGlider
Pattern	Gliders/BNHatGlider.cs	/^    public int[] Pattern { get; }$/;"	p	class:BNHatGlider
Pattern	Gliders/C1Glider.cs	/^    public int[] Pattern { get; } = _pattern;$/;"	p	class:C1Glider
Pattern	Gliders/C2Glider.cs	/^    public int[] Pattern { get; } = _pattern;$/;"	p	class:C2Glider
Pattern	Gliders/C3Glider.cs	/^    public int[] Pattern { get; } = _pattern;$/;"	p	class:C3Glider
Pattern	Gliders/D1Glider.cs	/^    public int[] Pattern { get; } = _pattern;$/;"	p	class:D1Glider
Pattern	Gliders/D2Glider.cs	/^    public int[] Pattern { get; } = _pattern;$/;"	p	class:D2Glider
Pattern	Gliders/EHatGlider.cs	/^    public int[] Pattern { get; }$/;"	p	class:EHatGlider
Pattern	Gliders/ENGlider.cs	/^    public int[] Pattern { get;  set; }$/;"	p	class:ENGlider
Pattern	Gliders/FGlider.cs	/^    public int[] Pattern { get; } = _pattern;$/;"	p	class:FGlider
Pattern	Gliders/GNGlider.cs	/^    public int[] Pattern { get;  set; }$/;"	p	class:GNGlider
Pattern	Gliders/GenericGlider.cs	/^    public int[] Pattern { get; set; }$/;"	p	class:GenericGlider
Pattern	Gliders/GliderGun.cs	/^    public int[] Pattern { get;  set; } = _pattern;$/;"	p	class:GliderGun
Pattern	Gliders/HGlider.cs	/^    public int[] Pattern { get;  set; } = _pattern;$/;"	p	class:HGlider
Pattern	IGlider.cs	/^    int[] Pattern { get; }$/;"	p	interface:IGlider
Periods	EtherBackground.cs	/^    public static int[] Periods { get; } = [ 0, 4, 8, 12 ];$/;"	p	class:EtherBackground
Position	EmptyBackground.cs	/^    public int Position => 0;$/;"	f	class:EmptyBackground
Position	EtherBackground.cs	/^    public int Position => _pointer % PERIOD_X;$/;"	f	class:EtherBackground
Position	IBackground.cs	/^    int Position { get; }$/;"	p	interface:IBackground
Prefix	Gliders/ENGlider.cs	/^    public static int[] Prefix { get; } = TileUtils.ParseStrip("*........");$/;"	p	class:ENGlider
Prefix	Gliders/GNGlider.cs	/^    public static int[] Prefix = TileUtils.ParseStrip("*....******.*..**.*.");$/;"	f	class:GNGlider
Program	Program.cs	/^public class Program$/;"	c
Random	Program.cs	/^    public static void Random()$/;"	m	class:Program
Save	ImgBmp.cs	/^    public void Save()$/;"	m	class:ImgBmp
Scene	Scene.cs	/^    public Scene(int size, IBackground background, List<IObserver> observers = null)$/;"	m	class:Scene
Scene	Scene.cs	/^public class Scene$/;"	c
SetState	Scene.cs	/^    public void SetState(int pos, int val)$/;"	m	class:Scene
Shift	EmptyBackground.cs	/^    public void Shift(int offset) {}$/;"	m	class:EmptyBackground
Shift	EtherBackground.cs	/^    public void Shift(int offset) $/;"	m	class:EtherBackground
Shift	IBackground.cs	/^    void Shift(int offset);$/;"	m	interface:IBackground
Size	Scene.cs	/^    public int Size => _size;$/;"	f	class:Scene
Suffix	Gliders/BNConeHatGlider.cs	/^    public override TileSuffix Suffix => BSuffix;$/;"	f	class:BNConeHatGlider
Suffix	Gliders/BNHatGlider.cs	/^    public abstract TileSuffix Suffix { get; }$/;"	p	class:BNHatGlider
Suffix	Gliders/BNStraightHatGlider.cs	/^    public override TileSuffix Suffix => BSuffix;$/;"	f	class:BNStraightHatGlider
Suffix	Gliders/ENGlider.cs	/^    public static int[] Suffix { get; set; } = [ 4, 12, 8 ];$/;"	p	class:ENGlider
Suffix	Gliders/GNGlider.cs	/^    public static TileSuffix Suffix = TileUtils.ParseSuffix([$/;"	f	class:GNGlider
Tape	Scene.cs	/^    public int[] Tape => _tape;$/;"	f	class:Scene
TestTile	GliderAnalyzer.cs	/^    private bool TestTile(ref int position, $/;"	m	class:GliderAnalyzer	file:
TestTileBackward	GliderAnalyzer.cs	/^    private bool TestTileBackward(ref int position, int tilePointer, int[] arr)$/;"	m	class:GliderAnalyzer	file:
ThinTile	Gliders/BNHatGlider.cs	/^    public static int ThinTile = 1;$/;"	f	class:BNHatGlider
Tile	EtherBackground.cs	/^    public static int[] Tile { get; } = [$/;"	p	class:EtherBackground
Tile	Tile.cs	/^public class Tile$/;"	c
TileEntrance	TilePrefix.cs	/^    public required int TileEntrance { get; set; }$/;"	p	class:TilePrefix
TileIndex	EmptyBackground.cs	/^    public int TileIndex { get; set; }$/;"	p	class:EmptyBackground
TileIndex	EtherBackground.cs	/^    public int TileIndex => _pointer \/ PERIOD_X;$/;"	f	class:EtherBackground
TileIndex	IBackground.cs	/^    int TileIndex { get; }$/;"	p	interface:IBackground
TilePrefix	TilePrefix.cs	/^public class TilePrefix$/;"	c
TileSuffix	TileSuffix.cs	/^public class TileSuffix$/;"	c
TileUtils	TileUtils.cs	/^public class TileUtils$/;"	c
TotalLength	TileUtils.cs	/^    public static int TotalLength(int[][] strips)$/;"	m	class:TileUtils
Width	GliderAnalyzer.cs	/^    private static int Width(IGlider glider)$/;"	m	class:GliderAnalyzer	file:
WriteHeader	ImgBmp.cs	/^    private void WriteHeader(int width, int height)$/;"	m	class:ImgBmp	file:
WriteRow	ImgBmp.cs	/^    public void WriteRow(int[] pixels)$/;"	m	class:ImgBmp
XPeriod	Tile.cs	/^    public int XPeriod { get; set; }$/;"	p	class:Tile
YPeriod	Tile.cs	/^    public int YPeriod { get; set; }$/;"	p	class:Tile
_background	Scene.cs	/^    private IBackground _background;$/;"	f	class:Scene	file:
_binary	ImgBmp.cs	/^    private BinaryWriter _binary;$/;"	f	class:ImgBmp	file:
_bitsPerBlock	ImgBmp.cs	/^    private int _bitsPerBlock;$/;"	f	class:ImgBmp	file:
_border	EtherBackground.cs	/^    private static int[,] _border = ConstructEtherBorder();$/;"	f	class:EtherBackground	file:
_etherEnters	Gliders/ANGlider.cs	/^    private static int[] _etherEnters = [ 8, 4, 12 ];$/;"	f	class:ANGlider	file:
_img	ImgObserver.cs	/^    private ImgBmp _img;$/;"	f	class:ImgObserver	file:
_initialized	Scene.cs	/^    private bool _initialized = false;$/;"	f	class:Scene	file:
_observers	Scene.cs	/^    private List<IObserver> _observers;$/;"	f	class:Scene	file:
_padding	ImgBmp.cs	/^    private int _padding = 0;$/;"	f	class:ImgBmp	file:
_pattern	Gliders/ANGlider.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*.**");$/;"	f	class:ANGlider	file:
_pattern	Gliders/BGlider.cs	/^    private static int[] _pattern = [ 1, 0 ];$/;"	f	class:BGlider	file:
_pattern	Gliders/C1Glider.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*.*******");$/;"	f	class:C1Glider	file:
_pattern	Gliders/C2Glider.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*......");$/;"	f	class:C2Glider	file:
_pattern	Gliders/C3Glider.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*.**.");$/;"	f	class:C3Glider	file:
_pattern	Gliders/D1Glider.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*.***.*****");$/;"	f	class:D1Glider	file:
_pattern	Gliders/D2Glider.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*.*..**..");$/;"	f	class:D2Glider	file:
_pattern	Gliders/EHatGlider.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*....*...*****.*.");$/;"	f	class:EHatGlider	file:
_pattern	Gliders/FGlider.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*.***.*.***...*");$/;"	f	class:FGlider	file:
_pattern	Gliders/GliderGun.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*...*.**...***.***..***...*"); $/;"	f	class:GliderGun	file:
_pattern	Gliders/HGlider.cs	/^    private static int[] _pattern = TileUtils.ParseStrip("*.***.***********..**...*..**.********/;"	f	class:HGlider	file:
_pointer	EtherBackground.cs	/^    private int _pointer = 0; $/;"	f	class:EtherBackground	file:
_row	Scene.cs	/^    private int _row = 0;$/;"	f	class:Scene	file:
_saved	ImgBmp.cs	/^    private bool _saved = false;$/;"	f	class:ImgBmp	file:
_size	ConsoleObserver.cs	/^    private int _size;$/;"	f	class:ConsoleObserver	file:
_size	Scene.cs	/^    private int _size;$/;"	f	class:Scene	file:
_table	Scene.cs	/^    private static int[] _table = Construct();$/;"	f	class:Scene	file:
_tape	Scene.cs	/^    private int[] _tape;$/;"	f	class:Scene	file:
_tmp	Scene.cs	/^    private int[] _tmp;$/;"	f	class:Scene	file:
_window	ConsoleObserver.cs	/^    private int _window;$/;"	f	class:ConsoleObserver	file:
_writer	ImgBmp.cs	/^    private FileStream _writer;$/;"	f	class:ImgBmp	file:
stars	TileUtils.cs	/^    public static TileSuffix ParseSuffix((string, int)[] stars)$/;"	p	class:TileUtils
